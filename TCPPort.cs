/***************************************************************************
*                                                                          *
*                      Nestor Lee (15SIS030Y / 1501044)                    *
*                        ICT 4001 - Capstone Project                       *
*                    Cryptocurrency Mining Malware Detector                *
*                    Singapore Institute of Technology (SIT)               * 
*          neslee92@gmail.com / 15SIS030Y@SIT.SingaporeTech.edu.sg         *
*                                                                          *
****************************************************************************/

/*
 * 
 *  Filename:   TCPPort.cs 
 *  Purpose:    Class file for the TCPPort objects 
 *              TCPPort objects are used to store information regarding each TCP connection on the machine the Cryptocurrency Mining Malware Detector is executed on
 *              
 */


using System.Collections.Generic;
using System.Diagnostics;
using System.Net;

namespace CryptocurrencyMiningMalwareDectector
{
    internal class TCPPort
    {
        private IPAddress LocalAddress;
        private IPAddress RemoteAddress;
        private ushort LocalPort;
        private ushort RemotePort;
        private string TcpState;
        private string ProcessName;
        private int ProcessId;
        private bool isSuspicious;

        public IPAddress getLocalAddress()
        {
            return this.LocalAddress;
        }

        public IPAddress getRemoteAddress()
        {
            return this.RemoteAddress;
        }

        public ushort getLocalPort()
        {
            return this.LocalPort;
        }

        public ushort getRemotePort()
        {
            return this.RemotePort;
        }

        public string getTcpState()
        {
            return this.TcpState;
        }

        public string getProcessName()
        {
            return this.ProcessName;
        }

        public int getProcessId()
        {
            return this.ProcessId;
        }

        public bool isTcpConnectionSuspicious()
        {
            return this.isSuspicious;
        }

        public TCPPort(IPAddress localIp, IPAddress remoteIp, ushort localPort, ushort remotePort, string tcpState,  int processId)
        {
            this.LocalAddress = localIp;
            this.RemoteAddress = remoteIp;
            this.LocalPort = localPort;
            this.RemotePort = remotePort;
            this.TcpState = tcpState;
            this.ProcessId = processId;

            // Get Process Name from Process ID
            Process p = Process.GetProcessById(processId);
            this.ProcessName = p.ProcessName;

            // TO-DO: Determine if a particular connection is suspicious
            string[] suspiciousIPStringList = { "174.138.25.3", "198.134.112.244", "198.134.112.243", "198.134.112.241", "198.134.112.242" ,
                                                 "199.193.73.38", "199.193.73.36", "199.193.73.40", "199.193.73.42",
                                                 "2604:9e00:1:138::14", "2604:9e00:1:138::12", "2604:9e00:1:138::11", "2604:9e00:1:138::13",
                                                 "2606:4700:30::681f:131e", "2606:4700:30::681f:121e", "104.31.19.30", "104.31.19.30" };
            List<IPAddress> suspiciousIPAddressList = new List<IPAddress>();
            foreach (string s in suspiciousIPStringList)
            {
                suspiciousIPAddressList.Add(IPAddress.Parse(s));
            }

            if ((suspiciousIPAddressList.Contains(this.LocalAddress) || suspiciousIPAddressList.Contains(this.RemoteAddress)))
                this.isSuspicious = true;              
            else
                this.isSuspicious = false;
            
        }
    }
}