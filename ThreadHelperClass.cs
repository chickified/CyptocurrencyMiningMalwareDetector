/***************************************************************************
*                                                                          *
*                      Nestor Lee (15SIS030Y / 1501044)                    *
*                        ICT 4001 - Capstone Project                       *
*                    Cryptocurrency Mining Malware Detector                *
*                    Singapore Institute of Technology (SIT)               * 
*          neslee92@gmail.com / 15SIS030Y@SIT.SingaporeTech.edu.sg         *
*                                                                          *
****************************************************************************/

/*
 * 
 *  Filename:   ThreadHelperClass.cs 
 *  Purpose:    Class file used to store functions for threads 
 *              If objects within the Forms are required to be edited, these functions will serve as a means for threads to edit them in a safe manner
 *              
 */


 using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using WindowsFormsAppHelloworld;

namespace CryptocurrencyMiningMalwareDectector
{
    public static class ThreadHelperClass
    {
        delegate void SetTextCallBack(Form form, Control control, string text);
        delegate void SwapConnectionsImageCallback(Form form, PictureBox pictureBox, Image image);

        delegate void CallRefreshDataGridViewCallback(Form form, DataGridView dataGridView);
        delegate void CallRowsClearDataGridViewCallback(Form form, DataGridView dataGridView);
        delegate void CallAddRowsDataGridViewCallback(Form form, DataGridView dataGridView);
        delegate void CallSetCellTextDataGridViewCallback(Form form, DataGridView dataGridView, int rowIndex, int colIndex, string setTextString);

        delegate void CallSetProgressBarMinimumValueCallback(Form form, ProgressBar progressBar, int minimumValue);
        delegate void CallSetProgressBarMaximumValueCallback(Form form, ProgressBar progressBar, int maximumValue);
        delegate void CallSetProgressBarStepCallback(Form form, ProgressBar progressBar, int stepValue);
        delegate void CallSetProgressBarEqualsCallback(Form form, ProgressBar progressBar, int equalsValue);
        delegate void CallSetProgressBarPerformStepCallback(Form form, ProgressBar progressBar);
        delegate void CallSetProgressBarValueCallback(Form form, ProgressBar progressBar, int value);

        delegate void CallSetButtonTextCallback(Form form, Button btn, string text);

        delegate void CallSetTableLayoutBackgroundColorCallback(Form form, TableLayoutPanel tableLayoutPanel, Color color);

        delegate void CallSetLabelTextCallback(Form form, Label label, string text);

        delegate void CallCreateFlashCallback(Form form);

        delegate void CallSetBalloonTipIconCallback(Form form, NotifyIcon notifyIcon, ToolTipIcon toolTipIcon);
        delegate void CallSetBalloonTipTitleCallback(Form form, NotifyIcon notifyIcon, string text);
        delegate void CallSetBalloonTipTextCallback(Form form, NotifyIcon notifyIcon, string text);
        delegate void CallShowBalloonTipCallback(Form form, NotifyIcon notifyIcon, int duration);

        public static void SetText(Form form, Control control, string text)
        {
            if (control.InvokeRequired)
            {
                SetTextCallBack d = new SetTextCallBack(SetText);
                form.Invoke(d, new object[] { form, control, text });
            }
            else
            {
                control.Text = text;
            }
        }

        public static void SwapConnectionsImage(Form form, PictureBox pictureBox, Image image)
        {
            if (pictureBox.InvokeRequired)
            {
                SwapConnectionsImageCallback d = new SwapConnectionsImageCallback(SwapConnectionsImage);
                form.Invoke(d, new object[] { form, pictureBox, image });
            }
            else
            {
                pictureBox.Image = image;
            }
        }

        public static void CallSetProgressBarMinimumValue(Form form, ProgressBar progressBar, int minimumValue)
        {
            if (progressBar.InvokeRequired)
            {
                CallSetProgressBarMinimumValueCallback d = new CallSetProgressBarMinimumValueCallback(CallSetProgressBarMinimumValue);
                form.Invoke(d, new object[] { form, progressBar, minimumValue });
            }
            else
            {
                progressBar.Minimum = minimumValue;
            }
        }

        public static void CallSetProgressBarMaximumValue(Form form, ProgressBar progressBar, int maximumValue)
        {
            if (progressBar.InvokeRequired)
            {
                CallSetProgressBarMaximumValueCallback d = new CallSetProgressBarMaximumValueCallback(CallSetProgressBarMaximumValue);
                form.Invoke(d, new object[] { form, progressBar, maximumValue });
            }
            else
            {
                progressBar.Maximum = maximumValue;
            }
        }

        public static void CallSetProgressBarStep(Form form, ProgressBar progressBar, int stepValue)
        {
            if (progressBar.InvokeRequired)
            {
                CallSetProgressBarStepCallback d = new CallSetProgressBarStepCallback(CallSetProgressBarStep);
                form.Invoke(d, new object[] { form, progressBar, stepValue });
            }
            else
            {
                progressBar.Step = stepValue;
            }
        }

        public static void CallSetProgressBarEquals(Form form, ProgressBar progressBar, int equalsValue)
        {
            if (progressBar.InvokeRequired)
            {
                CallSetProgressBarEqualsCallback d = new CallSetProgressBarEqualsCallback(CallSetProgressBarEquals);
                form.Invoke(d, new object[] { form, progressBar, equalsValue });
            }
            else
            {
                progressBar.Equals(equalsValue);
            }
        }

        public static void CallSetProgressBarPerformStep(Form form, ProgressBar progressBar)
        {
            if (progressBar.InvokeRequired)
            {
                CallSetProgressBarPerformStepCallback d = new CallSetProgressBarPerformStepCallback(CallSetProgressBarPerformStep);
                form.Invoke(d, new object[] { form, progressBar });
            }
            else
            {
                progressBar.PerformStep();
            }
        }

        public static void CallSetProgressBarValue(Form form, ProgressBar progressBar, int value)
        {
            if (progressBar.InvokeRequired)
            {
                CallSetProgressBarValueCallback d = new CallSetProgressBarValueCallback(CallSetProgressBarValue);
                form.Invoke(d, new object[] { form, progressBar, value });
            }
            else
            {
                progressBar.Value = value;
            }
        }

        public static void CallSetButtonText(Form form, Button btn, string text)
        {
            if (btn.InvokeRequired)
            {
                CallSetButtonTextCallback d = new CallSetButtonTextCallback(CallSetButtonText);
                form.Invoke(d, new object[] { form, btn, text });
            }
            else
            {
                btn.Text = text;
            }
        }

        public static void CallRefreshDataGridView(Form form, DataGridView dataGridView)
        {
            if (dataGridView.InvokeRequired)
            {
                CallRefreshDataGridViewCallback d = new CallRefreshDataGridViewCallback(CallRefreshDataGridView);
                form.Invoke(d, new object[] { form, dataGridView });
            }
            else
            {
                dataGridView.Refresh();
            }
        }

        public static void CallRowsClearDataGridView(Form form, DataGridView dataGridView)
        {
            if (dataGridView.InvokeRequired)
            {
                CallRowsClearDataGridViewCallback d = new CallRowsClearDataGridViewCallback(CallRowsClearDataGridView);
                form.Invoke(d, new object[] { form, dataGridView });
            }
            else
            {
                dataGridView.Rows.Clear();
            }
        }

        public static void CallAddRowsDataGridView(Form form, DataGridView dataGridView)
        {
            if (dataGridView.InvokeRequired)
            {
                CallAddRowsDataGridViewCallback d = new CallAddRowsDataGridViewCallback(CallAddRowsDataGridView);
                form.Invoke(d, new object[] { form, dataGridView });
            }
            else
            {
                dataGridView.Rows.Add();
            }
        }

        public static void CallSetCellTextDataGridView(Form form, DataGridView dataGridView, int rowIndex, int colIndex, string setTextString)
        {
            try
            {
                if (dataGridView.InvokeRequired)
                {
                    CallSetCellTextDataGridViewCallback d = new CallSetCellTextDataGridViewCallback(CallSetCellTextDataGridView);
                    form.Invoke(d, new object[] { form, dataGridView, rowIndex, colIndex, setTextString });
                }
                else
                {
                    dataGridView.Rows[rowIndex].Cells[colIndex].Value = setTextString;
                }
            }
            catch (ArgumentOutOfRangeException)
            {
                Console.WriteLine("ArgumentOutOfRangeException caught while updating {0} table.", dataGridView.Name);
            }
        }

        public static void CallSetTableLayoutBackgroundColor(Form form, TableLayoutPanel tableLayoutPanel, Color color)
        {
            if (tableLayoutPanel.InvokeRequired)
            {
                CallSetTableLayoutBackgroundColorCallback d = new CallSetTableLayoutBackgroundColorCallback(CallSetTableLayoutBackgroundColor);
                form.Invoke(d, new object[] { form, tableLayoutPanel, color });
            }
            else
            {
                tableLayoutPanel.BackColor = color;
            }
        }

        public static void CallSetLabelText(Form form, Label label, string text)
        {
            if (label.InvokeRequired)
            {
                CallSetLabelTextCallback d = new CallSetLabelTextCallback(CallSetLabelText);
                form.Invoke(d, new object[] { form, label, text });
            }
            else
            {
                label.Text = text;
            }
        }

        public static void CallCreateFlash(Form form)
        {
            if (form.InvokeRequired)
            {
                CallCreateFlashCallback d = new CallCreateFlashCallback(CallCreateFlash);
                form.Invoke(d, new object[] { form });
            }
            else
            {
                FlashWindow.Flash(form);
            }
        }

        public static void CallSetBalloonTipIcon(Form form, NotifyIcon notifyIcon, ToolTipIcon toolTipIcon)
        {
            if (form.InvokeRequired)
            {
                CallSetBalloonTipIconCallback d = new CallSetBalloonTipIconCallback(CallSetBalloonTipIcon);
                form.Invoke(d, new object[] { form, notifyIcon, toolTipIcon });
            }
            else
            {
                notifyIcon.BalloonTipIcon = toolTipIcon;
            }
        }

        public static void CallSetBalloonTipTitle(Form form, NotifyIcon notifyIcon, string text)
        {
            if (form.InvokeRequired)
            {
                CallSetBalloonTipTitleCallback d = new CallSetBalloonTipTitleCallback(CallSetBalloonTipTitle);
                form.Invoke(d, new object[] { form, notifyIcon, text });
            }
            else
            {
                notifyIcon.BalloonTipTitle = text;
            }
        }

        public static void CallSetBalloonTipText(Form form, NotifyIcon notifyIcon, string text)
        {
            if (form.InvokeRequired)
            {
                CallSetBalloonTipTextCallback d = new CallSetBalloonTipTextCallback(CallSetBalloonTipText);
                form.Invoke(d, new object[] { form, notifyIcon, text });
            }
            else
            {
                notifyIcon.BalloonTipText = text;
            }
        }

        public static void CallShowBalloonTip(Form form, NotifyIcon notifyIcon, int duration)
        {
            if (form.InvokeRequired)
            {
                CallShowBalloonTipCallback d = new CallShowBalloonTipCallback(CallShowBalloonTip);
                form.Invoke(d, new object[] { form, notifyIcon, duration });
            }
            else
            {
                notifyIcon.ShowBalloonTip(duration);
            }
        }

    }
}
