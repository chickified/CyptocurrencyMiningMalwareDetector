using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace CryptocurrencyMiningMalwareDectector
{
    public partial class Form3 : Form
    {
        public Form3()
        {
            InitializeComponent();
        }

        private string GetAllConnectionsOutput()
        {
            Process p = new Process();
            ProcessStartInfo ps = new ProcessStartInfo();
            ps.Arguments = "-a -n -o";
            ps.FileName = "netstat.exe";
            ps.UseShellExecute = false;
            ps.WindowStyle = ProcessWindowStyle.Hidden;
            ps.RedirectStandardInput = true;
            ps.RedirectStandardOutput = true;
            ps.RedirectStandardError = true;
            ps.CreateNoWindow = true;

            p.StartInfo = ps;
            p.Start();

            StreamReader stdOutput = p.StandardOutput;
            StreamReader stdError = p.StandardError;

            string content = stdOutput.ReadToEnd() + stdError.ReadToEnd();
            string exitStatus = p.ExitCode.ToString();

            if (exitStatus != "0")
            {
                GetAllConnectionsOutput();
            }

            return content;
        }

        private string[] splitIPAddressAndPortNumber(string combinedIPAddressAndPortNumber)
        {
            // Index 0 = empty space
            // Index 1 = IP Address
            // Index 2 = Colon
            // Index 3 = Port Number
            string[] processedString = Regex.Split(combinedIPAddressAndPortNumber, "(.*)((?::))((?:[0-9]+))$");
            return processedString;
        }

        private void udpConnectionsForm_Load(object sender, EventArgs e)
        {
            executeCommandsToGetUdpConnections();
        }

        private List<UDPPort> executeCommandsToGetUdpConnections()
        {
            List<UDPPort> udpPorts = new List<UDPPort>();
            int udpConnectionCount = 0;

            try
            {
                string commandOutput = GetAllConnectionsOutput();
                string[] rows = Regex.Split(commandOutput, "\r\n");
                foreach (string row in rows)
                {
                    string[] tokens = Regex.Split(row, "\\s+");

                    if (tokens.Length > 4 && (tokens[1].Equals("UDP")))
                    {
                        udpConnectionCount++;
                        // tokens[0] = empty space
                        // tokens[1] = protocol (tcp/udp)
                        // tokens[2] = local ip + local port
                        // tokens[3] = remote ip + remote port
                        // tokens[4] = process id

                        string[] UDPlocalIpPlusPortCombination = splitIPAddressAndPortNumber(tokens[2]);
                        IPAddress UDPlocalIP = IPAddress.Parse(UDPlocalIpPlusPortCombination[1]);
                        ushort UDPlocalPort = Convert.ToUInt16(UDPlocalIpPlusPortCombination[3]);

                        IPAddress UDPremoteIP;
                        ushort UDPremotePort;
                        string[] UDPremoteIpPlusPortCombination = splitIPAddressAndPortNumber(tokens[3]);
                        if (UDPremoteIpPlusPortCombination[0].Equals("*:*"))
                        {
                            UDPremoteIP = null;
                            UDPremotePort = 0;
                        }
                        else
                        {
                            UDPremoteIP = IPAddress.Parse(UDPremoteIpPlusPortCombination[1]);
                            UDPremotePort = Convert.ToUInt16(UDPremoteIpPlusPortCombination[3]);
                        }
                        int UDPprocessId = Convert.ToInt32(tokens[4]);

                        udpPorts.Add(new UDPPort(UDPlocalIP, UDPlocalPort, UDPremoteIP, UDPremotePort, UDPprocessId));
                    }
                }
                populateUdpNetworkInformationTable(udpPorts);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            udpFormTotalConnectionsValue.Text = udpPorts.Count.ToString();
            return udpPorts;
        }

        private void populateUdpNetworkInformationTable(List<UDPPort> udpPorts)
        {
            udpNetworkInformationTable.Rows.Clear();
            udpNetworkInformationTable.Refresh();
            for(int listCount = 0; listCount < udpPorts.Count; listCount++)
            {
                udpNetworkInformationTable.Rows.Add();
                for(int columnCount = 0; columnCount < udpNetworkInformationTable.ColumnCount; columnCount++)
                {
                    switch (columnCount)
                    {
                        case 0: udpNetworkInformationTable.Rows[listCount].Cells[columnCount].Value = (listCount + 1).ToString();
                                break;
                        case 1: udpNetworkInformationTable.Rows[listCount].Cells[columnCount].Value = udpPorts[listCount].getLocalAddress();
                                break;
                        case 2: udpNetworkInformationTable.Rows[listCount].Cells[columnCount].Value = udpPorts[listCount].getLocalPort();
                                break;
                        case 3: if (udpPorts[listCount].getRemoteAddress() == null)
                                    udpNetworkInformationTable.Rows[listCount].Cells[columnCount].Value = "*";
                                else
                                    udpNetworkInformationTable.Rows[listCount].Cells[columnCount].Value = udpPorts[listCount].getRemoteAddress();
                                break;
                        case 4: if (udpPorts[listCount].getRemotePort() == 0)
                                    udpNetworkInformationTable.Rows[listCount].Cells[columnCount].Value = "*";
                                else
                                    udpNetworkInformationTable.Rows[listCount].Cells[columnCount].Value = udpPorts[listCount].getRemotePort();
                                break;
                        case 5: udpNetworkInformationTable.Rows[listCount].Cells[columnCount].Value = udpPorts[listCount].getProcessName();
                                break;
                        case 6: udpNetworkInformationTable.Rows[listCount].Cells[columnCount].Value = udpPorts[listCount].getProcessId();
                                break;
                        case 7: udpNetworkInformationTable.Rows[listCount].Cells[columnCount].Value = udpPorts[listCount].isUDPConnectionSuspicious();
                            break;
                    }
                }
            }
            udpNetworkInformationTable.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
        }

        private void refreshTcpConnectionsButton_Click(object sender, EventArgs e)
        {
            executeCommandsToGetUdpConnections();
        }
    }
}
